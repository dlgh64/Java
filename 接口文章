接口 Interface

1. Overview
在本文中，我们将讨论 Java 中的接口，我们还将看到 Java 如何使用它们来实现多态性和多重继承。


2. What Are Interfaces in Java?
在 Java 中，接口是一种抽象类型，包含方法和常量变量的集合。它是Java中的核心概念之一，用于实现抽象、多态和多重继承。
我们可以使用 implements 关键字在 Java 类中实现接口。
  2.1 Rules for Creating Interfaces
      在一个界面中，我们可以使用：
      常量变量（constants variables）
      抽象方法（abstract methods）
      静态方法（static methods）
      默认方法（default methods）
      另外；
      ·我们不能直接实例化接口
      ·接口可以为空，其中没有方法或变量
      ·我们不能在接口定义中使用final word，因为它会导致编译器错误
      ·所有接口声明都应该有 public 或 default 访问修饰符； abstract 修饰符将由编译器自动添加
      ·接口方法不能被保护或最终
      ·在 Java 9 之前，接口方法不能是私有的；然而，Java 9 引入了在接口中定义私有方法的可能性
      ·根据定义，接口变量是公共的、静态的和最终的；我们不允许更改他们的可见性


3. What Can We Achieve by Using Them?
  3.1. Behavioral Functionality
      我们使用接口来添加可以被不相关的类使用的某些行为功能。例如，Comparable、Comparator 和 Cloneable 是可以由不相关的类实现的 Java 接口。
  3.2. Multiple Inheritances
      Java 类支持单一继承。然而，通过使用接口，我们也可以实现多重继承。
  3.3. Polymorphism
      让我们从问一个问题开始：什么是多态性？这是对象在运行时采取不同形式的能力。更具体地说，它是在运行时执行与特定对象类型相关的覆盖方法。
      在Java中，我们可以使用接口来实现多态。例如，Shape 界面可以采用不同的形式——它可以是圆形或方形。
      
      
4. Default Methods in Interfaces
Java 7 及更低版本中的传统接口不提供向后兼容性。
这意味着如果使用 Java 7 或更早版本编写的遗留代码，并且决定将抽象方法添加到现有接口，那么实现该接口的所有类都必须覆盖新的抽象方法。否则，代码将中断。
Java 8 通过引入可选的并且可以在接口级别实现的默认方法解决了这个问题。


5. Interface Inheritance Rules
为了通过接口实现多重继承，我们必须记住一些规则。
  5.1. Interface Extending Another Interface
      当一个接口扩展另一个接口时，它会继承该接口的所有抽象方法。
  5.2. Abstract Class Implementing an Interface
      当一个抽象类实现一个接口时，它继承了它的所有抽象方法和默认方法。
   
   
6. Functional Interfaces
Java 从早期就有很多函数式接口，例如 Comparable（从 Java 1.2 开始）和 Runnable（从 Java 1.0 开始）。
Java 8 引入了新的函数式接口，例如 Predicate、Consumer 和 Function。


several sample code：
https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-lang-oop-inheritance


